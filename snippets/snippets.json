{
	"useState": {
    "prefix": "ush",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);$0"
    ],
    "description": "React useState() hook"
	},
	"useEffect": {
		"prefix": "ueh",
		"body": [
			"useEffect(() => {",
				"\n\t$LINE_COMMENT componentDidMount(), componentDidUpdate()",
				"\t$1",
				"\n\treturn cleanUp = () => {",
					"\t$LINE_COMMENT componentWillUnmount()",
					"\t\t$2",
				"\t}",
			"$LINE_COMMENT effect dependency array",
			"}, [${3:dependencies}]);$0"
		],
		"description": "React useEffect() hook"
	},
	"useContext": {
		"prefix": "uch",
		"body": [
			"const $1 = useContext($2);$0"
		],
		"description": "React useContext() hook"
	},
	"useCallback": {
		"prefix": "ucbh",
		"body": [
			"const ${1:memoizedCallback} = useCallback(",
				"\t() => {",
					"\t\t${2:doSomething}(${3:a}, ${4:b})",
				"\t},",
				"\t[${5:a}, ${6:b}],",
			");$0"
		],
		"description": "React useCallback() hook"
	},
	"useMemo": {
		"prefix": "umh",
		"body": [
			"const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}]);$0"
		],
		"description": "React useMemo() hook"
	},
	"import react hooks": {
    "prefix": "irh",
    "body": ["import React, { useState, useContext, useEffect, useCallback, useMemo } from 'react';"]
  },
	"useRef": {
	"prefix": "urh",
	"body": [
		"const $1 = useRef($2)$0"
    ],
    "description": "React useRef() hook"
},
	"useReducer": {
    "prefix": "urdh",
    "body": [
        "const [${1:state},${2: dispatch}] = useReducer(state, action);", 
            
            "\n\treturn (",
            "\t\t",
            "\t);"

        ],
        "description": "React useReducer() hook"
},
    "prev state": {
        "prefix": "prev",
        "body": [ "const prev${1/(.*)/${1:/capitalize}/}Ref = useRef();", "useEffect(() => {", "\tprev${1/(.*)/${1:/capitalize}/}Ref.current = $1;", "});", "const prev$1 = prev${1:/capitalize}/}Ref.current;"]
}
